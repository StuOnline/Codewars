def maximum_median(arr, min_length):
    return max(arr[int(min_length/2):len(arr)-int(min_length/2)])
    
    
    '''Maximum Middle
Task
You will be given a sequence of integers represented by the array or list, arr, and the minimum length, min_length of a continuous subsequence (or a substring just applied to a list/array/sequence.) Then, return the maximum possible middle term of all possible continuous subsequences with an odd length greater than or equal to min_length.

Things To Know
A continuous subsequence can be defined as a sequence inbetween a start index and stop index (inclusive) of the sequence. For instance, [2, 3, 4] is a continuous subsequence of [1, 2, 3, 4, 5] , but [3, 5] and [4, 1] are not. In this kata, min_length will always be odd and less than or equal to the length of arr (and positive).

"Performance Requirements"
The length of arr can be up to 10,000. Each element of arr is in the range of -10,000 to 10,000.

Sample Inputs & Outputs (With Explanations)
arr = [5, 9, 6, 10, 0], min_length = 3 -> 10
# [6, 10, 0] has length 3 with a middle term of 10. 
arr = [7, 10, 0, 2, 1, 1, 8, 9], min_length = 5 -> 2
# [7, 10, 0, 2, 1, 1, 8] has length 7 with a middle term of 2.
arr = [8, 5, 3, -2], min_length = 1 -> 8
# [8] has length of 1 with a middle term of 8
arr = [1, -3, -2], min_length = 3 -> -3
# [1, -3, -2] has length of 3 with a middle term of -3
NOTE: It can be proved that the answers are the maximized. Also, arr CAN contain negative numbers

'''
